{
  "contractName": "SHA1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "x",
          "type": "bytes32"
        }
      ],
      "name": "Debug",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"Debug\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Volumes/hd2/Sandbox/git-commits-ethereum/contracts/SHA1.sol\":\"SHA1\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Volumes/hd2/Sandbox/git-commits-ethereum/contracts/SHA1.sol\":{\"keccak256\":\"0xf70481954b6c296bb162cad76e9158ec2f972e0a15928deb1c204ba1e065eb80\",\"urls\":[\"bzzr://0b3a6c6c10e1a5c4679bb6eb1c9a442640808e088a60b596606f1405dae6de62\"]}},\"version\":1}",
  "bytecode": "0x604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f801fa76f8e432e39de45dfd73a7fceefe8d8df372f1542c890394183507f1270029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f801fa76f8e432e39de45dfd73a7fceefe8d8df372f1542c890394183507f1270029",
  "sourceMap": "25:4911:2:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "25:4911:2:-;;;;;;;;",
  "source": "pragma solidity ^0.5.2;\n\nlibrary SHA1 {\n  event Debug(bytes32 x);\n\n  function sha1(bytes memory data) internal pure returns(bytes20 ret) {\n    assembly {\n      // Get a safe scratch location\n      let scratch := mload(0x40)\n\n      // Get the data length, and point data at the first byte\n      let len := mload(data)\n      data := add(data, 32)\n\n      // Find the length after padding\n      let totallen := add(and(add(len, 1), 0xFFFFFFFFFFFFFFC0), 64)\n      switch lt(sub(totallen, len), 9)\n      case 1 { totallen := add(totallen, 64) }\n\n      let h := 0x6745230100EFCDAB890098BADCFE001032547600C3D2E1F0\n\n      function readword(ptr, off, count) -> result {\n        result := 0\n        if lt(off, count) {\n          result := mload(add(ptr, off))\n          count := sub(count, off)\n          if lt(count, 32) {\n            let mask := not(sub(exp(256, sub(32, count)), 1))\n            result := and(result, mask)\n          }\n        }\n      }\n\n      for { let i := 0 } lt(i, totallen) { i := add(i, 64) } {\n        mstore(scratch, readword(data, i, len))\n        mstore(add(scratch, 32), readword(data, add(i, 32), len))\n\n        // If we loaded the last byte, store the terminator byte\n        switch lt(sub(len, i), 64)\n        case 1 { mstore8(add(scratch, sub(len, i)), 0x80) }\n\n        // If this is the last block, store the length\n        switch eq(i, sub(totallen, 64))\n        case 1 { mstore(add(scratch, 32), or(mload(add(scratch, 32)), mul(len, 8))) }\n\n        // Expand the 16 32-bit words into 80\n        for { let j := 64 } lt(j, 128) { j := add(j, 12) } {\n          let temp := xor(xor(mload(add(scratch, sub(j, 12))), mload(add(scratch, sub(j, 32)))), xor(mload(add(scratch, sub(j, 56))), mload(add(scratch, sub(j, 64)))))\n          temp := or(and(mul(temp, 2), 0xFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFE), and(div(temp, 0x80000000), 0x0000000100000001000000010000000100000001000000010000000100000001))\n          mstore(add(scratch, j), temp)\n        }\n        for { let j := 128 } lt(j, 320) { j := add(j, 24) } {\n          let temp := xor(xor(mload(add(scratch, sub(j, 24))), mload(add(scratch, sub(j, 64)))), xor(mload(add(scratch, sub(j, 112))), mload(add(scratch, sub(j, 128)))))\n          temp := or(and(mul(temp, 4), 0xFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC), and(div(temp, 0x40000000), 0x0000000300000003000000030000000300000003000000030000000300000003))\n          mstore(add(scratch, j), temp)\n        }\n\n        let x := h\n        let f := 0\n        let k := 0\n        for { let j := 0 } lt(j, 80) { j := add(j, 1) } {\n          switch div(j, 20)\n          case 0 {\n            // f = d xor (b and (c xor d))\n            f := xor(div(x, 0x100000000000000000000), div(x, 0x10000000000))\n            f := and(div(x, 0x1000000000000000000000000000000), f)\n            f := xor(div(x, 0x10000000000), f)\n            k := 0x5A827999\n          }\n          case 1{\n            // f = b xor c xor d\n            f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n            f := xor(div(x, 0x10000000000), f)\n            k := 0x6ED9EBA1\n          }\n          case 2 {\n            // f = (b and c) or (d and (b or c))\n            f := or(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n            f := and(div(x, 0x10000000000), f)\n            f := or(and(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000)), f)\n            k := 0x8F1BBCDC\n          }\n          case 3 {\n            // f = b xor c xor d\n            f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n            f := xor(div(x, 0x10000000000), f)\n            k := 0xCA62C1D6\n          }\n          // temp = (a leftrotate 5) + f + e + k + w[i]\n          let temp := and(div(x, 0x80000000000000000000000000000000000000000000000), 0x1F)\n          temp := or(and(div(x, 0x800000000000000000000000000000000000000), 0xFFFFFFE0), temp)\n          temp := add(f, temp)\n          temp := add(and(x, 0xFFFFFFFF), temp)\n          temp := add(k, temp)\n          temp := add(div(mload(add(scratch, mul(j, 4))), 0x100000000000000000000000000000000000000000000000000000000), temp)\n          x := or(div(x, 0x10000000000), mul(temp, 0x10000000000000000000000000000000000000000))\n          x := or(and(x, 0xFFFFFFFF00FFFFFFFF000000000000FFFFFFFF00FFFFFFFF), mul(or(and(div(x, 0x4000000000000), 0xC0000000), and(div(x, 0x400000000000000000000), 0x3FFFFFFF)), 0x100000000000000000000))\n        }\n\n        h := and(add(h, x), 0xFFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF)\n      }\n      ret := mul(or(or(or(or(and(div(h, 0x100000000), 0xFFFFFFFF00000000000000000000000000000000), and(div(h, 0x1000000), 0xFFFFFFFF000000000000000000000000)), and(div(h, 0x10000), 0xFFFFFFFF0000000000000000)), and(div(h, 0x100), 0xFFFFFFFF00000000)), and(h, 0xFFFFFFFF)), 0x1000000000000000000000000)\n    }\n  }\n}\n",
  "sourcePath": "/Volumes/hd2/Sandbox/git-commits-ethereum/contracts/SHA1.sol",
  "ast": {
    "absolutePath": "/Volumes/hd2/Sandbox/git-commits-ethereum/contracts/SHA1.sol",
    "exportedSymbols": {
      "SHA1": [
        839
      ]
    },
    "id": 840,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 825,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 839,
        "linearizedBaseContracts": [
          839
        ],
        "name": "SHA1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 829,
            "name": "Debug",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 827,
                  "indexed": false,
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 829,
                  "src": "54:9:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 826,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "54:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "53:11:2"
            },
            "src": "42:23:2"
          },
          {
            "body": {
              "id": 837,
              "nodeType": "Block",
              "src": "137:4797:2",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "323:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "311:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "335:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1042:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1099:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "ret": {
                        "declaration": 834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "4629:3:2",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 836,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let scratch := mload(0x40)\n    let len := mload(data)\n    data := add(data, 32)\n    let totallen := add(and(add(len, 1), 0xFFFFFFFFFFFFFFC0), 64)\n    switch lt(sub(totallen, len), 9)\n    case 1 {\n        totallen := add(totallen, 64)\n    }\n    let h := 0x6745230100EFCDAB890098BADCFE001032547600C3D2E1F0\n    function readword(ptr, off, count) -> result\n    {\n        result := 0\n        if lt(off, count)\n        {\n            result := mload(add(ptr, off))\n            count := sub(count, off)\n            if lt(count, 32)\n            {\n                let mask := not(sub(exp(256, sub(32, count)), 1))\n                result := and(result, mask)\n            }\n        }\n    }\n    for {\n        let i := 0\n    }\n    lt(i, totallen)\n    {\n        i := add(i, 64)\n    }\n    {\n        mstore(scratch, readword(data, i, len))\n        mstore(add(scratch, 32), readword(data, add(i, 32), len))\n        switch lt(sub(len, i), 64)\n        case 1 {\n            mstore8(add(scratch, sub(len, i)), 0x80)\n        }\n        switch eq(i, sub(totallen, 64))\n        case 1 {\n            mstore(add(scratch, 32), or(mload(add(scratch, 32)), mul(len, 8)))\n        }\n        for {\n            let j := 64\n        }\n        lt(j, 128)\n        {\n            j := add(j, 12)\n        }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 12))), mload(add(scratch, sub(j, 32)))), xor(mload(add(scratch, sub(j, 56))), mload(add(scratch, sub(j, 64)))))\n            temp := or(and(mul(temp, 2), 0xFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFE), and(div(temp, 0x80000000), 0x0000000100000001000000010000000100000001000000010000000100000001))\n            mstore(add(scratch, j), temp)\n        }\n        for {\n            let j := 128\n        }\n        lt(j, 320)\n        {\n            j := add(j, 24)\n        }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 24))), mload(add(scratch, sub(j, 64)))), xor(mload(add(scratch, sub(j, 112))), mload(add(scratch, sub(j, 128)))))\n            temp := or(and(mul(temp, 4), 0xFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC), and(div(temp, 0x40000000), 0x0000000300000003000000030000000300000003000000030000000300000003))\n            mstore(add(scratch, j), temp)\n        }\n        let x := h\n        let f := 0\n        let k := 0\n        for {\n            let j := 0\n        }\n        lt(j, 80)\n        {\n            j := add(j, 1)\n        }\n        {\n            switch div(j, 20)\n            case 0 {\n                f := xor(div(x, 0x100000000000000000000), div(x, 0x10000000000))\n                f := and(div(x, 0x1000000000000000000000000000000), f)\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x5A827999\n            }\n            case 1 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x6ED9EBA1\n            }\n            case 2 {\n                f := or(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := and(div(x, 0x10000000000), f)\n                f := or(and(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000)), f)\n                k := 0x8F1BBCDC\n            }\n            case 3 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0xCA62C1D6\n            }\n            let temp := and(div(x, 0x80000000000000000000000000000000000000000000000), 0x1F)\n            temp := or(and(div(x, 0x800000000000000000000000000000000000000), 0xFFFFFFE0), temp)\n            temp := add(f, temp)\n            temp := add(and(x, 0xFFFFFFFF), temp)\n            temp := add(k, temp)\n            temp := add(div(mload(add(scratch, mul(j, 4))), 0x100000000000000000000000000000000000000000000000000000000), temp)\n            x := or(div(x, 0x10000000000), mul(temp, 0x10000000000000000000000000000000000000000))\n            x := or(and(x, 0xFFFFFFFF00FFFFFFFF000000000000FFFFFFFF00FFFFFFFF), mul(or(and(div(x, 0x4000000000000), 0xC0000000), and(div(x, 0x400000000000000000000), 0x3FFFFFFF)), 0x100000000000000000000))\n        }\n        h := and(add(h, x), 0xFFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF)\n    }\n    ret := mul(or(or(or(or(and(div(h, 0x100000000), 0xFFFFFFFF00000000000000000000000000000000), and(div(h, 0x1000000), 0xFFFFFFFF000000000000000000000000)), and(div(h, 0x10000), 0xFFFFFFFF0000000000000000)), and(div(h, 0x100), 0xFFFFFFFF00000000)), and(h, 0xFFFFFFFF)), 0x1000000000000000000000000)\n}",
                  "src": "143:4787:2"
                }
              ]
            },
            "documentation": null,
            "id": 838,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sha1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 832,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 831,
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 838,
                  "src": "83:17:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 830,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "83:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "82:19:2"
            },
            "returnParameters": {
              "id": 835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 834,
                  "name": "ret",
                  "nodeType": "VariableDeclaration",
                  "scope": 838,
                  "src": "124:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes20",
                    "typeString": "bytes20"
                  },
                  "typeName": {
                    "id": 833,
                    "name": "bytes20",
                    "nodeType": "ElementaryTypeName",
                    "src": "124:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes20",
                      "typeString": "bytes20"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "123:13:2"
            },
            "scope": 839,
            "src": "69:4865:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 840,
        "src": "25:4911:2"
      }
    ],
    "src": "0:4937:2"
  },
  "legacyAST": {
    "absolutePath": "/Volumes/hd2/Sandbox/git-commits-ethereum/contracts/SHA1.sol",
    "exportedSymbols": {
      "SHA1": [
        839
      ]
    },
    "id": 840,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 825,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": null,
        "fullyImplemented": true,
        "id": 839,
        "linearizedBaseContracts": [
          839
        ],
        "name": "SHA1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 829,
            "name": "Debug",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 827,
                  "indexed": false,
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 829,
                  "src": "54:9:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 826,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "54:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "53:11:2"
            },
            "src": "42:23:2"
          },
          {
            "body": {
              "id": 837,
              "nodeType": "Block",
              "src": "137:4797:2",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "323:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "311:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "335:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1042:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "data": {
                        "declaration": 831,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1099:4:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "ret": {
                        "declaration": 834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "4629:3:2",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 836,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let scratch := mload(0x40)\n    let len := mload(data)\n    data := add(data, 32)\n    let totallen := add(and(add(len, 1), 0xFFFFFFFFFFFFFFC0), 64)\n    switch lt(sub(totallen, len), 9)\n    case 1 {\n        totallen := add(totallen, 64)\n    }\n    let h := 0x6745230100EFCDAB890098BADCFE001032547600C3D2E1F0\n    function readword(ptr, off, count) -> result\n    {\n        result := 0\n        if lt(off, count)\n        {\n            result := mload(add(ptr, off))\n            count := sub(count, off)\n            if lt(count, 32)\n            {\n                let mask := not(sub(exp(256, sub(32, count)), 1))\n                result := and(result, mask)\n            }\n        }\n    }\n    for {\n        let i := 0\n    }\n    lt(i, totallen)\n    {\n        i := add(i, 64)\n    }\n    {\n        mstore(scratch, readword(data, i, len))\n        mstore(add(scratch, 32), readword(data, add(i, 32), len))\n        switch lt(sub(len, i), 64)\n        case 1 {\n            mstore8(add(scratch, sub(len, i)), 0x80)\n        }\n        switch eq(i, sub(totallen, 64))\n        case 1 {\n            mstore(add(scratch, 32), or(mload(add(scratch, 32)), mul(len, 8)))\n        }\n        for {\n            let j := 64\n        }\n        lt(j, 128)\n        {\n            j := add(j, 12)\n        }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 12))), mload(add(scratch, sub(j, 32)))), xor(mload(add(scratch, sub(j, 56))), mload(add(scratch, sub(j, 64)))))\n            temp := or(and(mul(temp, 2), 0xFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFE), and(div(temp, 0x80000000), 0x0000000100000001000000010000000100000001000000010000000100000001))\n            mstore(add(scratch, j), temp)\n        }\n        for {\n            let j := 128\n        }\n        lt(j, 320)\n        {\n            j := add(j, 24)\n        }\n        {\n            let temp := xor(xor(mload(add(scratch, sub(j, 24))), mload(add(scratch, sub(j, 64)))), xor(mload(add(scratch, sub(j, 112))), mload(add(scratch, sub(j, 128)))))\n            temp := or(and(mul(temp, 4), 0xFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC), and(div(temp, 0x40000000), 0x0000000300000003000000030000000300000003000000030000000300000003))\n            mstore(add(scratch, j), temp)\n        }\n        let x := h\n        let f := 0\n        let k := 0\n        for {\n            let j := 0\n        }\n        lt(j, 80)\n        {\n            j := add(j, 1)\n        }\n        {\n            switch div(j, 20)\n            case 0 {\n                f := xor(div(x, 0x100000000000000000000), div(x, 0x10000000000))\n                f := and(div(x, 0x1000000000000000000000000000000), f)\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x5A827999\n            }\n            case 1 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0x6ED9EBA1\n            }\n            case 2 {\n                f := or(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := and(div(x, 0x10000000000), f)\n                f := or(and(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000)), f)\n                k := 0x8F1BBCDC\n            }\n            case 3 {\n                f := xor(div(x, 0x1000000000000000000000000000000), div(x, 0x100000000000000000000))\n                f := xor(div(x, 0x10000000000), f)\n                k := 0xCA62C1D6\n            }\n            let temp := and(div(x, 0x80000000000000000000000000000000000000000000000), 0x1F)\n            temp := or(and(div(x, 0x800000000000000000000000000000000000000), 0xFFFFFFE0), temp)\n            temp := add(f, temp)\n            temp := add(and(x, 0xFFFFFFFF), temp)\n            temp := add(k, temp)\n            temp := add(div(mload(add(scratch, mul(j, 4))), 0x100000000000000000000000000000000000000000000000000000000), temp)\n            x := or(div(x, 0x10000000000), mul(temp, 0x10000000000000000000000000000000000000000))\n            x := or(and(x, 0xFFFFFFFF00FFFFFFFF000000000000FFFFFFFF00FFFFFFFF), mul(or(and(div(x, 0x4000000000000), 0xC0000000), and(div(x, 0x400000000000000000000), 0x3FFFFFFF)), 0x100000000000000000000))\n        }\n        h := and(add(h, x), 0xFFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF00FFFFFFFF)\n    }\n    ret := mul(or(or(or(or(and(div(h, 0x100000000), 0xFFFFFFFF00000000000000000000000000000000), and(div(h, 0x1000000), 0xFFFFFFFF000000000000000000000000)), and(div(h, 0x10000), 0xFFFFFFFF0000000000000000)), and(div(h, 0x100), 0xFFFFFFFF00000000)), and(h, 0xFFFFFFFF)), 0x1000000000000000000000000)\n}",
                  "src": "143:4787:2"
                }
              ]
            },
            "documentation": null,
            "id": 838,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sha1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 832,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 831,
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 838,
                  "src": "83:17:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 830,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "83:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "82:19:2"
            },
            "returnParameters": {
              "id": 835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 834,
                  "name": "ret",
                  "nodeType": "VariableDeclaration",
                  "scope": 838,
                  "src": "124:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes20",
                    "typeString": "bytes20"
                  },
                  "typeName": {
                    "id": 833,
                    "name": "bytes20",
                    "nodeType": "ElementaryTypeName",
                    "src": "124:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes20",
                      "typeString": "bytes20"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "123:13:2"
            },
            "scope": 839,
            "src": "69:4865:2",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 840,
        "src": "25:4911:2"
      }
    ],
    "src": "0:4937:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-07-28T08:23:33.935Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}